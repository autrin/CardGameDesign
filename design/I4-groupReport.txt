Features 2 & 8 - Sam Caldwell
    When the matchcontroller is created, it will be loaded in with a WarRules object, rather than the P52Rules. 
    From here, the WarRules will initiate the a WarInitMove move to begin initialize the game, once enough players
    are in the game.
    The new class, WarPlayer, will be responsible for keeping track of each players score, similar to the P52Player class.
    This WarPlayer will be passed in through the new WarCardMove move, which will fetch the score of the player, and send it
    To ShowPlayerScore, where the player's score will be updated.

Features 1 & 5 - Alexander Domowicz
    On the user interface the user will select the "War" button from the menu of games. When the GameController is created,
    a WarRules object instead of a P52Rules object is loaded in. From there the War game isSelected(). From there the the 
    WarRules are gotten and initialized and then GameController calls MatchController.
    When a player selects a card out of turn or from a pile that does not belong to them, they will be ignored and this is 
    a rule of the game. This creates a Move, the DoNothingMove object. As the name implies, nothing will happen and nothing 
    changes, the game stays at its current state and waits for a vaild move.

Features 7 & 10 - Autrin Hakimi: 
    When there is a tie, isTie() in WarRules will return true by checking the cards through Pile.java. 
    Facing up the cards is a resposibility of Pile.java. Also, when a player incorrecly selects a card while 
    selecting their cards 3 times after a tie, they will be ignored and this is a rule of the game. This creates a 
    Move, the DoNothingMove object.
    If a non-winner of a war selects the center cards incorreclty, all the center cards go to the other player's pile. 
    This is again a rule of the game done by improperCardSelection() i WarRules.java, which crates a move, a 
    WarCardMove object. Then WarCardMove will transfer the center cards to the other player's pile.

Features 9 & 11 - Andrew Snyder:
    Whenever a card is selected, and a card event is triggered, the WarRules class will move the card from its player's
    draw pile and add it to their war pile. It will then determine the winner of the match when the size of both player 1's
    war pile and player 2's war pile are equal. In the event of a winner, it will finally check if the losing player's discard
    pile is 0 and if so, return a WarWinMove with a victorNumber parameter as the winning player's number. When this move is
    then applied by the PlayController, it will use the setMatchOver() method of the Table class by setting it to true and then,
    when applied with the ViewFacade, it will send a new SetGameTitleRemote() to the ViewFacade with the title "Player X Wins"
    with X being replaced by the victorNumber instance variable. Then, in order to display a the deal button for the new game,
    as required by feature 11, the WarWinMove will also send a P52DealButton to the ViewFacade to display it for the next game.

Features 4 & 6 - John SchraderBachar
    For features 4 and 6 I added a war rules game and implemented it similar to how P52Rules was implemented, allowing it to use events, quorums, in a similar way to P52. 
    After the QuorumEvent of Deal is sent, the class instatiates the two piles and their respective players. I also had my design extend the Table interface so that we could 
    get the addPile, getPlayers, and partiesReady in our classes to better facilitate the start of the game. My design is a good seperation of concerns because it only has 
    things that the War card game class depends on/ needs and not other things it doesn't need. For 6 I added a new class WarSelectionEvent that specifically handles this 
    functionality only, and it has a selectEvent() that takes in the string selection (card numbers) and sets it to the primitave, and a getselection() method 
    to get the selection event to pass to the Event handlers. This is also a good seperation of concerns because we already have classes with the rules and event selection code
    so we can just pass this war specific selection event to those and the rules classes to evaluate them.
